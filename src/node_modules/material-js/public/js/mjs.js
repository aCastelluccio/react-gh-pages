((function () {

  console.log('being executed!!!');
  var mcMainScript = 'https://unpkg.com/material-components-web@latest/dist/material-components-web.min.js';
  var mcMainCss = 'https://unpkg.com/material-components-web@latest/dist/material-components-web.min.css';
  var mcIconsCss = 'https://fonts.googleapis.com/icon?family=Material+Icons';

  _mjsInit('parm1');

  function _mjsInit(parm) {
    if (undefined === window.mdc) {
      console.log(parm);
      //doButtons();
      _mjsInject(mcMainScript,
        mcMainCss,
        mcIconsCss)
        .then(() => {
          _mjsProcess();
        }).catch((err) => {
          alert('Injection error.\n\nReason: ' + err);
        });
    } else {
      _mjsProcess();
    }

  }



  function _mjsInject(src, link1, link2) {

    return new Promise((resolve, reject) => {
      const script = document.createElement('script');
      script.async = true;
      script.src = src;
      script.addEventListener('load', resolve);
      script.addEventListener('error', () => reject('Error loading script.'));
      script.addEventListener('abort', () => reject('Script loading aborted.'));
      document.head.appendChild(script);

      const l1 = document.createElement('link');
      l1.rel = 'stylesheet';
      l1.href = link1;
      document.head.appendChild(l1);

      const l2 = document.createElement('link');
      l2.rel = 'stylesheet';
      l2.href = link2;
      document.head.appendChild(l2);


    });
  }

  function _mjsProcess() {

    _mjsButtons();
    _mjsCheckBox();
    _mjsRadioButtons();

  }

  /**
   * Add md classes to button elements.
   */
  function _mjsButtons() {

    let buttonArray = document.getElementsByTagName('button');
    console.log('Number of buttons found...' + buttonArray.length);
    if (buttonArray === null) {
      return;
    }

    for (var i = 0; i < buttonArray.length; i++) {
      let button = buttonArray[i];
      console.log('Checking this button...');
      console.log(button);
      console.log(button.id);
      console.log(button.dataset.disabled);
      console.log(button.dataset.raised);
      console.log('Classes: ' + button.classList.length);
      let className = (undefined === button.dataset.raised || !button.dataset.raised) ? 'mdc-button' : 'mdc-button,mdc-button--raised';
      if (undefined !== button.dataset.type) {
        if (button.dataset.type.trim() === 'secondary') {
          className += ',mdc-theme--secondary-bg,mdc-theme--text-primary-on-secondary ';
        } else if (this.props.type.trim() === 'flat') {
          className += '  ';
        } else {
          className += ',mdc-theme--primary-bg,mdc-theme--text-primary-on-secondary ';
        }
      }
      console.log(className.split(','));
      button.classList.add(...className.split(','));
    }
  } // end buttons

  /**
   * Checkboxes
   */
  function _mjsCheckBox() {
    let cbArray = document.querySelectorAll('input[type="checkbox"]');
    if (cbArray === null) {
      return;
    }
    if (cbArray.length === 0) {
      return;
    }

    for (var i = 0; i < cbArray.length; i++) {
      let cb = cbArray[i];
      cb.classList.add( 'mdc-checkbox__native-control');
      console.log( 'On checkbox number: ' + ( i + 1 ));
      let outerDiv = document.createElement('div');
      outerDiv.id = '_mjscheckbox_' + i;
      cb.parentNode.insertBefore(outerDiv, cb );

      outerDiv.appendChild(cb);
      outerDiv.className = 'mdc-checkbox';
      
      let innerDiv = document.createElement('div');
      outerDiv.appendChild(innerDiv);
      
      innerDiv.className = 'mdc-checkbox__background';
      innerDiv.innerHTML =
        '<svg class="mdc-checkbox__checkmark"'
        + '    viewBox="0 0 24 24">'
        + '    <path class="mdc-checkbox__checkmark__path"'
        + '           fill="none"'
        + '           stroke="yellow"'
        + '           d="M1.73,12.91 8.1,19.28 22.79,4.59" />'
        + '</svg>'
        + '<div class="mdc-checkbox__mixedmark"></div>';
    }
  }

    /**
   * Checkboxes
   */
  function _mjsRadioButtons() {
    let radioArray = document.querySelectorAll('input[type="radio"]');
    if (radioArray === null) {
      return;
    }
    if (radioArray.length === 0) {
      return;
    }

    for (var i = 0; i < radioArray.length; i++) {
      let radio = radioArray[i];
      radio.classList.add( 'mdc-radio__native-control');
      console.log( 'On radio number: ' + ( i + 1 ));
      let outerDiv = document.createElement('div');
      outerDiv.id = '_mjsradio_' + i;
      radio.parentNode.insertBefore(outerDiv, radio );

      outerDiv.appendChild(radio);
      outerDiv.className = 'mdc-radio';
      
      let innerDiv = document.createElement('div');
      outerDiv.appendChild(innerDiv);
      
      innerDiv.className = 'mdc-radio__background';
      innerDiv.innerHTML =
        '<div class="mdc-radio__outer-circle "></div>'
        + '<div class="mdc-radio__inner-circle "></div>';
    }


  }

}()));

class tester {

  constructor() {

  }

  myFunc() {
    alert('myFunc');
  }
}